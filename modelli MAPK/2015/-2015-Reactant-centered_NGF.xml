<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
<declaration>
// Place global declarations here.
clock globalTime;
const int INFINITE_TIME = -1;
const int N_REACTANTS = 12;
broadcast chan reacting[N_REACTANTS];

//R0 = (1)
int R0 := 1;
const int R0Levels := 1;

//R1 = (2)
int R1 := 1;
const int R1Levels := 1;

//R2 = (3)
int R2 := 1;
const int R2Levels := 1;

//R3 = EGF
int R3 := 0;
const int R3Levels := 15;

//R4 = ERK
int R4 := 0;
const int R4Levels := 100;

//R5 = MEK
int R5 := 0;
const int R5Levels := 60;

//R6 = NGF
int R6 := 15;
const int R6Levels := 15;

//R7 = PKC
int R7 := 0;
const int R7Levels := 40;

//R8 = RAF
int R8 := 0;
const int R8Levels := 60;

//R9 = RKIP
int R9 := 20;
const int R9Levels := 20;

//R10 = introduction of Ab
int R10 := 1;
const int R10Levels := 1;

//R11 = neutralizing antibody
int R11 := 0;
const int R11Levels := 1;


typedef struct {
	int[-99980001, 99980001] b;
	int e;
} double_t;

const double_t zero = {0, 0};
const double_t INFINITE_TIME_DOUBLE = {-1000, -3}; //INFINITE_TIME (-1) translated into double
const double_t LOWER_UNC = {1000, -3}, //Lower and upper scale factors to apply uncertainty. E.g. for +/- 5% uncertainty, we have lower uncertainty = 0.95, upper uncertainty = 1.05
             UPPER_UNC = {1000, -3};

typedef int[-1, 1073741822] time_t;

typedef struct {
	time_t T;
} timeActivity;

//Reaction R8 (RAF) --> R5 (MEK)
timeActivity R8_R5;
const double_t k_R8_R5 = {9030, -8};

//Reaction R1 ((2)) --| R5 (MEK)
timeActivity R1_R5;
const double_t k_R1_R5 = {4830, -7};

//Reaction R11 (neutralizing antibody) --| R6 (NGF)
timeActivity R11_R6;
const double_t k_R11_R6 = {3750, -7};

//Reaction R4 (ERK) --> R8 (RAF)
timeActivity R4_R8;
const double_t k_R4_R8 = {3750, -10};

//Reaction R5 (MEK) --> R4 (ERK)
timeActivity R5_R4;
const double_t k_R5_R4 = {1250, -7};

//Reaction R4 (ERK) --| R5 (MEK)
timeActivity R4_R5;
const double_t k_R4_R5 = {1917, -8};

//Reaction R10 (introduction of Ab) --> R11 (neutralizing antibody)
timeActivity R10_R11;
const double_t k_R10_R11 = {2917, -7};

//Reaction R2 ((3)) --| R4 (ERK)
timeActivity R2_R4;
const double_t k_R2_R4 = {7500, -7};

//Reaction R11 (neutralizing antibody) --| R3 (EGF)
timeActivity R11_R3;
const double_t k_R11_R3 = {6250, -6};

//Reaction R7 (PKC) --| R9 (RKIP)
timeActivity R7_R9;
const double_t k_R7_R9 = {1000, -8};

//Reaction R6 (NGF) --> R8 (RAF)
timeActivity R6_R8;
const double_t k_R6_R8 = {3330, -8};

//Reaction R6 (NGF) --> R7 (PKC)
timeActivity R6_R7;
const double_t k_R6_R7 = {4440, -9};

//Reaction R0 ((1)) --| R8 (RAF)
timeActivity R0_R8;
const double_t k_R0_R8 = {3330, -7};

//Reaction R3 (EGF) --> R8 (RAF)
timeActivity R3_R8;
const double_t k_R3_R8 = {8330, -8};

//Reaction R9 (RKIP) --| R8 (RAF)
timeActivity R9_R8;
const double_t k_R9_R8 = {1042, -7};



double_t subtract(double_t a, double_t b) { // a - b
	double_t r = {-1000, -1000};
	if (a.b == 0) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (a.e == b.e) {
		r.b = a.b - b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b - b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b - b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b - b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 - b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t add(double_t a, double_t b) { // a + b
	double_t r = {-1000,-1000};
	if (a.b == 0) {
		return b;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) return b;
	if (a.e == b.e) {
		r.b = a.b + b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b + b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b + b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b + b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 + b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t multiply(double_t a, double_t b) { // a * b
	double_t r;
	r.b = a.b * b.b;
	if (r.b % 1000 &lt; 500) {
		r.b = r.b / 1000;
	} else {
		r.b = 1 + r.b / 1000;
	}
	r.e = a.e + b.e + 3;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double_t inverse(double_t a) { // 1 / a
	double_t r;
	if (a.b == 0 || a.e &lt; -9) { // 1 / 1e-9 is still ok, but 1 / 1e-10 is too large (&gt; 2&#94;30 - 2, the largest allowed constant for guards/invariants)
		return INFINITE_TIME_DOUBLE;
	}
	r.b = 1000000 / a.b;
	r.e = -6 - a.e;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	}
	return r;
}

time_t power(int a, int b) { // a ^ b (b &gt;= 0)
	time_t r = 1;
	while (b &gt; 0) {
		r = r * a;
		b = b - 1;
	}
	return r;
}

time_t round(double_t a) { // double --&gt; integer
	if (a == INFINITE_TIME_DOUBLE) { // Don't need to translate literally if we have infinite
		return INFINITE_TIME;
	}
	if (a.e &lt; -3) {
		if (a.b &lt; 5000) return 0;
		else return 1;
	}
	if (a.e == -1) {
		if (a.b % 10 &lt; 5) {
			return a.b / 10;
		} else {
			return 1 + a.b / 10;
		}
	}
	if (a.e == -2) {
		if (a.b % 100 &lt; 50) {
			return a.b / 100;
		} else {
			return 1 + a.b / 100;
		}
	}
	if (a.e == -3) {
		if (a.b % 1000 &lt; 500) {
			return a.b / 1000;
		} else {
			return 1 + a.b / 1000;
		}
	}
	return a.b * power(10, a.e);
}

double_t scenario1(double_t k, double_t r1, double_t r1Levels, bool r1Active) {
	double_t E;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	return multiply(k, E);
}


double_t scenario2_3(double_t k, double_t r2, double_t r2Levels, bool r2Active, double_t r1, double_t r1Levels, bool r1Active) {
	double_t E, S;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	if (r2Active) { //Same for R2
		S = r2;
	} else {
		S = subtract(r2Levels, r2);
	}
	return multiply(k, multiply(E, S));
}


double_t int_to_double(int a) { //Used to translate an activity level into double.
	double_t r;
	if (a &lt; 10) {
		r.b = a * 1000;
		r.e = -3;
	} else if (a &lt; 100) {
		r.b = a * 100;
		r.e = -2;
	} else if (a &lt; 1000) {
		r.b = a * 10;
		r.e = -1;
	} else if (a &lt; 10000) { //Our model supports up to 100 levels, so this should be the most it makes sense to check
		r.b = a;
		r.e = 0;
	}
	return r;
}
</declaration>

<template>
  <name>Reactant_R3</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R11_R3_r = scenario2_3(k_R11_R3, int_to_double(R3), int_to_double(R3Levels), true, int_to_double(R11), int_to_double(R11Levels), true);
	totalRate = subtract(zero, R11_R3_r);
	R11_R3.T = round(multiply(inverse(R11_R3_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[11]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[3]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[11]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R4</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R5_R4_r = scenario2_3(k_R5_R4, int_to_double(R4), int_to_double(R4Levels), false, int_to_double(R5), int_to_double(R5Levels), true);
	double_t R2_R4_r = scenario2_3(k_R2_R4, int_to_double(R4), int_to_double(R4Levels), true, int_to_double(R2), int_to_double(R2Levels), true);
	totalRate = subtract(add(zero, R5_R4_r), R2_R4_r);
	R5_R4.T = round(multiply(inverse(R5_R4_r), LOWER_UNC));
	R2_R4.T = round(multiply(inverse(R2_R4_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[5]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[2]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[4]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[5]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[2]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
</template>


<template>
  <name>Reactant_R5</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R8_R5_r = scenario2_3(k_R8_R5, int_to_double(R5), int_to_double(R5Levels), false, int_to_double(R8), int_to_double(R8Levels), true);
	double_t R1_R5_r = scenario2_3(k_R1_R5, int_to_double(R5), int_to_double(R5Levels), true, int_to_double(R1), int_to_double(R1Levels), true);
	double_t R4_R5_r = scenario2_3(k_R4_R5, int_to_double(R5), int_to_double(R5Levels), true, int_to_double(R4), int_to_double(R4Levels), true);
	totalRate = subtract(subtract(add(zero, R8_R5_r), R1_R5_r), R4_R5_r);
	R8_R5.T = round(multiply(inverse(R8_R5_r), LOWER_UNC));
	R1_R5.T = round(multiply(inverse(R1_R5_r), LOWER_UNC));
	R4_R5.T = round(multiply(inverse(R4_R5_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[8]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[1]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[4]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[5]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[8]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[1]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[4]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
</template>


<template>
  <name>Reactant_R6</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R11_R6_r = scenario2_3(k_R11_R6, int_to_double(R6), int_to_double(R6Levels), true, int_to_double(R11), int_to_double(R11Levels), true);
	totalRate = subtract(zero, R11_R6_r);
	R11_R6.T = round(multiply(inverse(R11_R6_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[11]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[6]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[11]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R7</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R6_R7_r = scenario2_3(k_R6_R7, int_to_double(R7), int_to_double(R7Levels), false, int_to_double(R6), int_to_double(R6Levels), true);
	totalRate = R6_R7_r;
	R6_R7.T = round(multiply(inverse(R6_R7_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[6]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[7]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[6]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R8</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R4_R8_r = scenario2_3(k_R4_R8, int_to_double(R8), int_to_double(R8Levels), false, int_to_double(R4), int_to_double(R4Levels), true);
	double_t R6_R8_r = scenario2_3(k_R6_R8, int_to_double(R8), int_to_double(R8Levels), false, int_to_double(R6), int_to_double(R6Levels), true);
	double_t R0_R8_r = scenario2_3(k_R0_R8, int_to_double(R8), int_to_double(R8Levels), true, int_to_double(R0), int_to_double(R0Levels), true);
	double_t R3_R8_r = scenario2_3(k_R3_R8, int_to_double(R8), int_to_double(R8Levels), false, int_to_double(R3), int_to_double(R3Levels), true);
	double_t R9_R8_r = scenario2_3(k_R9_R8, int_to_double(R8), int_to_double(R8Levels), true, int_to_double(R9), int_to_double(R9Levels), true);
	totalRate = subtract(add(subtract(add(add(zero, R4_R8_r), R6_R8_r), R0_R8_r), R3_R8_r), R9_R8_r);
	R4_R8.T = round(multiply(inverse(R4_R8_r), LOWER_UNC));
	R6_R8.T = round(multiply(inverse(R6_R8_r), LOWER_UNC));
	R0_R8.T = round(multiply(inverse(R0_R8_r), LOWER_UNC));
	R3_R8.T = round(multiply(inverse(R3_R8_r), LOWER_UNC));
	R9_R8.T = round(multiply(inverse(R9_R8_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[4]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-944">reacting[6]?</label>
    <label kind="assignment" x="-1528" y="-928">update()</label>
    <nail x="-1552" y="-928"/>
    <nail x="-1376" y="-928"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-984">reacting[0]?</label>
    <label kind="assignment" x="-1528" y="-968">update()</label>
    <nail x="-1552" y="-968"/>
    <nail x="-1376" y="-968"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1024">reacting[3]?</label>
    <label kind="assignment" x="-1528" y="-1008">update()</label>
    <nail x="-1552" y="-1008"/>
    <nail x="-1376" y="-1008"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-1064">reacting[9]?</label>
    <label kind="assignment" x="-1528" y="-1048">update()</label>
    <nail x="-1552" y="-1048"/>
    <nail x="-1376" y="-1048"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[8]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[4]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-792">reacting[6]?</label>
    <nail x="-1752" y="-776"/>
    <nail x="-1840" y="-776"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-840">reacting[0]?</label>
    <nail x="-1752" y="-824"/>
    <nail x="-1840" y="-824"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-888">reacting[3]?</label>
    <nail x="-1752" y="-872"/>
    <nail x="-1840" y="-872"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-936">reacting[9]?</label>
    <nail x="-1752" y="-920"/>
    <nail x="-1840" y="-920"/>
  </transition>
</template>


<template>
  <name>Reactant_R9</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R7_R9_r = scenario2_3(k_R7_R9, int_to_double(R9), int_to_double(R9Levels), true, int_to_double(R7), int_to_double(R7Levels), true);
	totalRate = subtract(zero, R7_R9_r);
	R7_R9.T = round(multiply(inverse(R7_R9_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[7]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[9]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[7]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>


<template>
  <name>Reactant_R11</name>
  <parameter>int&amp; R, const int MAX</parameter>
  <declaration>int[-1, 1] delta, deltaNew = 0, deltaOld = 0, deltaOldOld = 0, deltaOldOldOld = 0;
bool deltaAlternating = false;
time_t tL, tU;
clock c;
double_t totalRate;


void updateDeltaOld() {
	deltaOldOldOld = deltaOldOld;
	deltaOldOld = deltaOld;
	deltaOld = deltaNew;
	deltaNew = delta;
	deltaAlternating = false;
	if (deltaOldOldOld != 0) { //We have updated delta at least 4 times, so we can see whether we have an oscillation
		if (deltaNew == deltaOldOld &amp;&amp; deltaOld == deltaOldOldOld &amp;&amp; deltaNew != deltaOld) { //Pairwise equal and alternating (e.g. +1, -1, +1, -1): we are oscillating
			deltaAlternating = true;
			deltaNew = deltaOld = deltaOldOld = deltaOldOldOld = 0;
		}
	}
}

void update() {
	double_t R10_R11_r = scenario1(k_R10_R11, int_to_double(R10), int_to_double(R10Levels), true);
	totalRate = R10_R11_r;
	R10_R11.T = round(multiply(inverse(R10_R11_r), LOWER_UNC));
	if (totalRate.b &lt; 0) {
		delta = -1;
		totalRate.b = -totalRate.b;
	} else {
		delta = 1;
	}
	if (totalRate.b != 0) {
		tL = round(multiply(inverse(totalRate), LOWER_UNC));
		tU = round(multiply(inverse(totalRate), UPPER_UNC));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (0 &lt;= R + delta &amp;&amp; R + delta &lt;= MAX) {
		R = R + delta;
	}
	//updateDeltaOld();
	update();
}

bool can_react() {
	return !deltaAlternating &amp;&amp; (tL != INFINITE_TIME &amp;&amp; tL != 0 &amp;&amp; tU != 0 &amp;&amp; ((delta &gt;= 0 &amp;&amp; R &lt; MAX) || (delta &lt; 0 &amp;&amp; R &gt; 0)));
}

bool cant_react() {
	return deltaAlternating || (tL == INFINITE_TIME || tL == 0 || tU == 0 || (delta &gt;= 0 &amp;&amp; R == MAX) || (delta &lt; 0 &amp;&amp; R == 0));
}</declaration>
  <location id="id0" x="-1896" y="-728">
    <name x="-1960" y="-752">stubborn</name>
    <committed/>
  </location>
  <location id="id1" x="-1528" y="-728">
    <committed/>
  </location>
  <location id="id6" x="-1256" y="-728">
    <name x="-1248" y="-752">start</name>
    <committed/>
  </location>
  <location id="id7" x="-1552" y="-856">
    <name x="-1656" y="-872">not_reacting</name>
    <label kind="invariant" x="-1656" y="-856">c'==0</label>
  </location>
  <location id="id8" x="-1416" y="-728">
    <name x="-1400" y="-752">updating</name>
    <committed/>
  </location>
  <location id="id9" x="-1664" y="-728">
    <name x="-1728" y="-744">waiting</name>
    <label kind="invariant" x="-1728" y="-720">c &lt;= tU
|| tU ==
INFINITE_TIME</label>
  </location>
  <init ref="id6"/>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1640" y="-760">tU == INFINITE_TIME
|| c &lt;= tU</label>
  </transition>
  <transition>
    <source ref="id1"/>
    <target ref="id9"/>
    <label kind="guard" x="-1608" y="-712">tU != INFINITE_TIME
&amp;&amp; c &gt; tU</label>
    <label kind="assignment" x="-1608" y="-680">c := tU</label>
    <nail x="-1528" y="-680"/>
    <nail x="-1608" y="-680"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id8"/>
    <label kind="guard" x="-1816" y="-632">c &lt; tL</label>
    <label kind="assignment" x="-1816" y="-616">update()</label>
    <nail x="-1848" y="-616"/>
    <nail x="-1464" y="-616"/>
  </transition>
  <transition>
    <source ref="id0"/>
    <target ref="id9"/>
    <label kind="guard" x="-1816" y="-680">c &gt;= tL</label>
    <nail x="-1840" y="-664"/>
    <nail x="-1744" y="-664"/>
  </transition>
  <transition>
    <source ref="id6"/>
    <target ref="id8"/>
    <label kind="assignment" x="-1344" y="-728">update()</label>
  </transition>
  <transition>
    <source ref="id7"/>
    <target ref="id8"/>
    <label kind="synchronisation" x="-1512" y="-904">reacting[10]?</label>
    <label kind="assignment" x="-1528" y="-888">update()</label>
    <nail x="-1552" y="-888"/>
    <nail x="-1376" y="-888"/>
    <nail x="-1376" y="-848"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id7"/>
    <label kind="guard" x="-1512" y="-840">cant_react()</label>
    <nail x="-1416" y="-824"/>
    <nail x="-1552" y="-824"/>
  </transition>
  <transition>
    <source ref="id8"/>
    <target ref="id1"/>
    <label kind="guard" x="-1512" y="-744">can_react()</label>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id8"/>
    <label kind="guard" x="-1576" y="-816">c &gt;= tL</label>
    <label kind="synchronisation" x="-1584" y="-800">reacting[11]!</label>
    <label kind="assignment" x="-1568" y="-784">react(), c := 0</label>
    <nail x="-1632" y="-784"/>
    <nail x="-1464" y="-784"/>
  </transition>
  <transition>
    <source ref="id9"/>
    <target ref="id0"/>
    <label kind="synchronisation" x="-1832" y="-744">reacting[10]?</label>
    <nail x="-1752" y="-728"/>
    <nail x="-1840" y="-728"/>
  </transition>
</template>



<system>
R3_ = Reactant_R3(R3, 15);
R4_ = Reactant_R4(R4, 100);
R5_ = Reactant_R5(R5, 60);
R6_ = Reactant_R6(R6, 15);
R7_ = Reactant_R7(R7, 40);
R8_ = Reactant_R8(R8, 60);
R9_ = Reactant_R9(R9, 20);
R11_ = Reactant_R11(R11, 1);



system R3_, R4_, R5_, R6_, R7_, R8_, R9_, R11_;

</system>
</nta>
