<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'>
<nta>
	<declaration>
// Place global declarations here.
clock globalTime;
const int INFINITE_TIME = -1;
const int N_REACTANTS = 12;
broadcast chan reacting[N_REACTANTS];

//R8 = neutralizing antibody
int R8 := 0;

//R9 = (2)
int R9 := 1;

//R6 = RKIP
int R6 := 20;

//R7 = (3)
int R7 := 1;

//R4 = ERK
int R4 := 0;

//R5 = PKC
int R5 := 0;

//R2 = RAF
int R2 := 0;

//R3 = MEK
int R3 := 0;

//R1 = NGF
int R1 := 15;

//R0 = EGF
int R0 := 0;

//R11 = introduction of Ab
int R11 := 1;

//R10 = (1)
int R10 := 1;

typedef struct {
	int[-99980001, 99980001] b;
	int e;
} double;

typedef int[-1, 1073741822] time_t;

const double zero = {0, 0};
const double INFINITE_TIME_DOUBLE = {-1000, -3}; //INFINITE_TIME translated into double
const double timeScale = {1200, -1}; //The timeScale factor
const double uncertaintyUpper = {1000, -3}, //uncertainty
			 uncertaintyLower = {1000, -3};

double subtract(double a, double b) { // a - b
	double r = {-1000, -1000};
	if (a.b == 0) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) {
		r.b = -b.b;
		r.e = b.e;
		return r;
	}
	if (a.e == b.e) {
		r.b = a.b - b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b - b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b - b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b - b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 - b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 - b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	}
	return r;
}

double add(double a, double b) { // a + b
	double r = {-1000,-1000};
	if (a.b == 0) {
		return b;
	}
	if (b.b == 0) {
		return a;
	}
	if ((a.e - b.e) &gt;= 4) return a;
	if ((b.e - a.e) &gt;= 4) return b;
	if (a.e == b.e) {
		r.b = a.b + b.b;
		r.e = a.e;
	}
	if (a.e - b.e == 1) {
		r.b = a.b + b.b/10;
		r.e = a.e;
	}
	if (a.e - b.e == 2) {
		r.b = a.b + b.b/100;
		r.e = a.e;
	}
	if (a.e - b.e == 3) {
		r.b = a.b + b.b/1000;
		r.e = a.e;
	}
	if (b.e - a.e == 1) {
		r.b = a.b/10 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 2) {
		r.b = a.b/100 + b.b;
		r.e = b.e;
	}
	if (b.e - a.e == 3) {
		r.b = a.b/1000 + b.b;
		r.e = b.e;
	}
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
	r.b = r.b * 10;
		r.e = r.e - 1;
	}
	return r;
}

double multiply(double a, double b) { // a * b
	double r;
	r.b = a.b * b.b;
	if (r.b % 1000 &lt; 500) {
		r.b = r.b / 1000;
	} else {
		r.b = 1 + r.b / 1000;
	}
	r.e = a.e + b.e + 3;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	} else if (r.b &gt; 9999 || r.b &lt; -9999) {
		r.b = r.b / 10;
		r.e = r.e + 1;
	}
	return r;
}

double inverse(double a) { // 1 / a
	double r;
	if (a.b == 0) {
		return INFINITE_TIME_DOUBLE;
	}
	r.b = 1000000 / a.b;
	r.e = -6 - a.e;
	if ((r.b &gt; 0 &amp;&amp; r.b &lt; 10) || (r.b &lt; 0 &amp;&amp; r.b &gt; -10)) {
		r.b = r.b * 1000;
		r.e = r.e - 3;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 100) || (r.b &lt; 0 &amp;&amp; r.b &gt; -100)) {
		r.b = r.b * 100;
		r.e = r.e - 2;
	} else if ((r.b &gt; 0 &amp;&amp; r.b &lt; 1000) || (r.b &lt; 0 &amp;&amp; r.b &gt; -1000)) {
		r.b = r.b * 10;
		r.e = r.e - 1;
	}
	return r;
}

time_t power(int a, int b) { // a ^ b (b &gt;= 0)
	time_t r = 1;
	while (b &gt; 0) {
		r = r * a;
		b = b - 1;
	}
	return r;
}

time_t round(double a) { // double --&gt; integer
	if (a.e &lt; -3) {
		if (a.b &lt; 5000) return 0;
		else return 1;
	}
	if (a.e == -1) {
		if (a.b % 10 &lt; 5) {
			return a.b / 10;
		} else {
			return 1 + a.b / 10;
		}
	}
	if (a.e == -2) {
		if (a.b % 100 &lt; 50) {
			return a.b / 100;
		} else {
			return 1 + a.b / 100;
		}
	}
	if (a.e == -3) {
		if (a.b % 1000 &lt; 500) {
			return a.b / 1000;
		} else {
			return 1 + a.b / 1000;
		}
	}
	return a.b * power(10, a.e);
}

double scenario1(double k, double r1, double r1Levels, bool r1Active) {
	double E;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	return multiply(k, E);
}


double scenario2_3(double k, double r2, double r2Levels, bool r2Active, double r1, double r1Levels, bool r1Active) {
	double E, S;
	if (r1Active) { //If we depend on active R1, the level of activity is the value of E
		E = r1;
	} else { //otherwise we find the inactivity level via the total number of levels
		E = subtract(r1Levels, r1);
	}
	if (r2Active) { //Same for R2
		S = r2;
	} else {
		S = subtract(r2Levels, r2);
	}
	return multiply(k, multiply(E, S));
}


double int_to_double(int a) { //Used to translate an activity level into double.
	double r;
	if (a &lt; 10) {
		r.b = a * 1000;
		r.e = -3;
	} else if (a &lt; 100) {
		r.b = a * 100;
		r.e = -2;
	} else if (a &lt; 1000) {
		r.b = a * 10;
		r.e = -1;
	} else if (a &lt; 10000) { //Our model supports up to 100 levels, so this should be the most we can check
		r.b = a;
		r.e = 0;
	}
	return r;
}
</declaration>
	<template>
		<name x="5" y="5">Reaction_R6_R2</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {2500, -4};
const double levelsScale = {2000, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {2000, -2},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id0" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id1" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id2" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id3" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id4" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R8_R1</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {4500, -5};
const double levelsScale = {1000, -3};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -3},
			 R2Levels = {1500, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=15) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id5" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id6" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id7" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id8" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id9" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R11_R8</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {3500, -5};
const double levelsScale = {1000, -3};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -3};
double r;

void update() {
	r = scenario1(k, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=1) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id10" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id11" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id12" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id13" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id14" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R1_R5</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {8000, -6};
const double levelsScale = {1500, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1500, -2},
			 R2Levels = {4000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, false, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=40) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id15" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id16" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id17" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id18" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id19" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id15"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R8_R0</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {7500, -4};
const double levelsScale = {1000, -3};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -3},
			 R2Levels = {1500, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=15) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id20" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id21" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id22" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id23" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id24" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id24"/>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id20"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R1_R2</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {6000, -5};
const double levelsScale = {1500, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1500, -2},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, false, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id25" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id26" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id27" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id28" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id29" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id29"/>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id25"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R7_R4</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {9000, -5};
const double levelsScale = {1000, -3};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -3},
			 R2Levels = {1000, -1};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=100) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id30" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id31" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id32" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id33" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id34" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id30"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id30"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id32"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R4_R2</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {4500, -6};
const double levelsScale = {1000, -1};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -1},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, false, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id35" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id36" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id37" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id38" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id39" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id39"/>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id35"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id37"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id38"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R4_R3</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {2300, -4};
const double levelsScale = {1000, -1};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -1},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id40" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id41" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id42" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id43" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id44" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id44"/>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id40"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id43"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R5_R6</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {4800, -5};
const double levelsScale = {4000, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {4000, -2},
			 R2Levels = {2000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=20) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id45" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id46" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id47" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id48" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id49" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id49"/>
		<transition>
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id45"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id47"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id47"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id48"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R2_R3</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {6500, -4};
const double levelsScale = {6000, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {6000, -2},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, false, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id50" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id51" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id52" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id53" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id54" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id54"/>
		<transition>
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id50"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id50"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id53"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R0_R2</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {1500, -4};
const double levelsScale = {1500, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1500, -2},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, false, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id55" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id56" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id57" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id58" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id59" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id59"/>
		<transition>
			<source ref="id55"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id56"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id55"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id55"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id57"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id57"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id57"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id58"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id56"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R9_R3</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {5800, -5};
const double levelsScale = {1000, -3};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -3},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id60" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id61" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id62" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id63" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id64" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id64"/>
		<transition>
			<source ref="id60"/>
			<target ref="id61"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id60"/>
			<target ref="id61"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id61"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id60"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id60"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id62"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id62"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id63"/>
			<target ref="id62"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id63"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id61"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id62"/>
			<target ref="id61"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R3_R4</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {9000, -4};
const double levelsScale = {6000, -2};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {6000, -2},
			 R2Levels = {1000, -1};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, false, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=100) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id65" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id66" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id67" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id68" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id69" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id69"/>
		<transition>
			<source ref="id65"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id66"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id65"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id65"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id67"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id67"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id67"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id69"/>
			<target ref="id68"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Reaction_R10_R2</name>
		<parameter>int &amp;reactant1, int &amp;reactant2, int &amp;output, const int delta, broadcast chan &amp;r1_reacting, broadcast chan &amp;r2_reacting, broadcast chan &amp;output_reacting</parameter>
		<declaration>clock c;
time_t T, tL, tU;
const double k = {4000, -5};
const double levelsScale = {1000, -3};
const double scale = multiply(levelsScale, timeScale);
const double R1Levels = {1000, -3},
			 R2Levels = {6000, -2};
double r;

void update() {
	r = scenario2_3(k, int_to_double(reactant2), R2Levels, true, int_to_double(reactant1), R1Levels, true);
	if (r.b != 0) {
		double time = multiply(inverse(r), scale);
		tL = round(multiply(time, uncertaintyLower));
		tU = round(multiply(time, uncertaintyUpper));
	} else {
		tL = INFINITE_TIME;
		tU = INFINITE_TIME;
	}
	if (tL != INFINITE_TIME &amp;&amp; tU != INFINITE_TIME &amp;&amp; tL &gt; tU) { //We use rounded things: maybe the difference between tL and tU was not so great, and with some rounding problems we could have this case
		tL = tU;
	}
}

void react() {
	if (output+delta&gt;=0 &amp;&amp; output+delta&lt;=60) {
		output = output + delta;
	}
	update();
}
</declaration>
		<location id="id70" x="-1384" y="-976">
			<name x="-1392" y="-1008">not_reacting</name>
		</location>
		<location id="id71" x="-960" y="-856">
			<name x="-952" y="-880">updating</name>
			<committed/>
		</location>
		<location id="id72" x="-1384" y="-768">
			<name x="-1416" y="-808">waiting</name>
			<label kind="invariant" x="-1544" y="-792">tU == INFINITE_TIME
|| c&lt;=tU</label>
		</location>
		<location id="id73" x="-1384" y="-896">
			<committed/>
		</location>
		<location id="id74" x="-1536" y="-896">
			<name x="-1568" y="-928">start</name>
			<committed/>
		</location>
		<init ref="id74"/>
		<transition>
			<source ref="id70"/>
			<target ref="id71"/>
			<label kind="synchronisation" x="-1640" y="-992">r2_reacting?</label>
			<label kind="assignment" x="-1536" y="-992">update(), c:=0</label>
			<nail x="-1664" y="-976"/>
			<nail x="-1664" y="-584"/>
			<nail x="-920" y="-584"/>
			<nail x="-920" y="-784"/>
		</transition>
		<transition>
			<source ref="id70"/>
			<target ref="id71"/>
			<label kind="synchronisation" x="-1640" y="-1016">r1_reacting?</label>
			<label kind="assignment" x="-1536" y="-1016">update(), c:=0</label>
			<nail x="-1416" y="-1000"/>
			<nail x="-1672" y="-1000"/>
			<nail x="-1672" y="-576"/>
			<nail x="-912" y="-576"/>
			<nail x="-912" y="-792"/>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id71"/>
			<label kind="guard" x="-1376" y="-656">c&gt;=tL</label>
			<label kind="synchronisation" x="-1376" y="-640">output_reacting!</label>
			<label kind="assignment" x="-1376" y="-624">react(),
c:=0</label>
			<nail x="-1384" y="-624"/>
			<nail x="-936" y="-624"/>
			<nail x="-936" y="-768"/>
		</transition>
		<transition>
			<source ref="id71"/>
			<target ref="id70"/>
			<label kind="guard" x="-1328" y="-992">tL == INFINITE_TIME</label>
			<nail x="-960" y="-976"/>
		</transition>
		<transition>
			<source ref="id73"/>
			<target ref="id70"/>
			<label kind="guard" x="-1448" y="-952">tL == INFINITE_TIME</label>
		</transition>
		<transition>
			<source ref="id71"/>
			<target ref="id72"/>
			<label kind="guard" x="-1320" y="-896">tU != INFINITE_TIME
&amp;&amp; c&gt;tU</label>
			<label kind="assignment" x="-1320" y="-872">c:=tU, T:=tL</label>
			<nail x="-1328" y="-856"/>
		</transition>
		<transition>
			<source ref="id71"/>
			<target ref="id72"/>
			<label kind="guard" x="-1320" y="-824">(tU == INFINITE_TIME
&amp;&amp; tL != INFINITE_TIME)
|| (tU != INFINITE_TIME
&amp;&amp; c&lt;=tU)</label>
			<label kind="assignment" x="-1320" y="-768">T:=tL</label>
			<nail x="-960" y="-752"/>
			<nail x="-1328" y="-752"/>
		</transition>
		<transition>
			<source ref="id73"/>
			<target ref="id72"/>
			<label kind="guard" x="-1496" y="-864">tL != INFINITE_TIME</label>
			<label kind="assignment" x="-1496" y="-848">T := tL, c := 0</label>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id73"/>
			<label kind="assignment" x="-1496" y="-912">update()</label>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id71"/>
			<label kind="synchronisation" x="-1272" y="-744">r1_reacting?</label>
			<label kind="assignment" x="-1272" y="-728">update()</label>
			<nail x="-1320" y="-728"/>
			<nail x="-944" y="-728"/>
			<nail x="-944" y="-760"/>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id71"/>
			<label kind="synchronisation" x="-1272" y="-704">r2_reacting?</label>
			<label kind="assignment" x="-1272" y="-688">update()</label>
			<nail x="-1320" y="-688"/>
			<nail x="-944" y="-688"/>
			<nail x="-944" y="-760"/>
		</transition>
	</template>
	<system>
//Reaction R6 (RKIP) --| R2 (RAF)
R6_R2 = Reaction_R6_R2(R6, R2, R2, -1, reacting[2], reacting[6], reacting[6]);

//Reaction R8 (neutralizing antibody) --| R1 (NGF)
R8_R1 = Reaction_R8_R1(R8, R1, R1, -1, reacting[0], reacting[8], reacting[8]);

//Reaction R11 (introduction of Ab) --&gt; R8 (neutralizing antibody)
R11_R8 = Reaction_R11_R8(R11, R8, R8, 1, reacting[10], reacting[0], reacting[0]);

//Reaction R1 (NGF) --&gt; R5 (PKC)
R1_R5 = Reaction_R1_R5(R1, R5, R5, 1, reacting[8], reacting[5], reacting[5]);

//Reaction R8 (neutralizing antibody) --| R0 (EGF)
R8_R0 = Reaction_R8_R0(R8, R0, R0, -1, reacting[0], reacting[9], reacting[9]);

//Reaction R1 (NGF) --&gt; R2 (RAF)
R1_R2 = Reaction_R1_R2(R1, R2, R2, 1, reacting[8], reacting[6], reacting[6]);

//Reaction R7 ((3)) --| R4 (ERK)
R7_R4 = Reaction_R7_R4(R7, R4, R4, -1, reacting[3], reacting[4], reacting[4]);

//Reaction R4 (ERK) --&gt; R2 (RAF)
R4_R2 = Reaction_R4_R2(R4, R2, R2, 1, reacting[4], reacting[6], reacting[6]);

//Reaction R4 (ERK) --| R3 (MEK)
R4_R3 = Reaction_R4_R3(R4, R3, R3, -1, reacting[4], reacting[7], reacting[7]);

//Reaction R5 (PKC) --| R6 (RKIP)
R5_R6 = Reaction_R5_R6(R5, R6, R6, -1, reacting[5], reacting[2], reacting[2]);

//Reaction R2 (RAF) --&gt; R3 (MEK)
R2_R3 = Reaction_R2_R3(R2, R3, R3, 1, reacting[6], reacting[7], reacting[7]);

//Reaction R0 (EGF) --&gt; R2 (RAF)
R0_R2 = Reaction_R0_R2(R0, R2, R2, 1, reacting[9], reacting[6], reacting[6]);

//Reaction R9 ((2)) --| R3 (MEK)
R9_R3 = Reaction_R9_R3(R9, R3, R3, -1, reacting[1], reacting[7], reacting[7]);

//Reaction R3 (MEK) --&gt; R4 (ERK)
R3_R4 = Reaction_R3_R4(R3, R4, R4, 1, reacting[7], reacting[4], reacting[4]);

//Reaction R10 ((1)) --| R2 (RAF)
R10_R2 = Reaction_R10_R2(R10, R2, R2, -1, reacting[11], reacting[6], reacting[6]);





system R6_R2, R8_R1, R11_R8, R1_R5, R8_R0, R1_R2, R7_R4, R4_R2, R4_R3, R5_R6, R2_R3, R0_R2, R9_R3, R3_R4, R10_R2;

</system>
</nta>
